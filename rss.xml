<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>R. S. Doiel,</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s ramblings and wonderigsRobert&#39;s ramblings and wonderings</description>
        <copyright>copyright Â© 2016 - 2020 R. S. Doiel</copyright>
        <pubDate>Mon, 19 Oct 2020 00:00:00 UTC</pubDate>
        <lastBuildDate>Mon, 19 Oct 2020 00:00:00 UTC</lastBuildDate>
        <generator>mkrss v0.2.2</generator>
        <item>
            <title>Assembling Pages</title>
            <link>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.md</link>
            <description>Assembling pages&#xA;================&#xA;&#xA;This is the thirteenth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Pandoc and JSON&#xA;---------------&#xA;&#xA;I use [Pandoc](https://pandoc.org) to process Markdown documents. I like to keep my&#xA;front matter in JSON rather than Pandoc&#39;s YAML. Fortunately Pandoc&#xA;does support working with JSON as a metadata file include. Normally I would&#xA;manually split the JSON front matter and the rest of the markup into two&#xA;separate files, then process with Pandoc and other tooling like&#xA;[LunrJS](https://lunrjs.com). [AssemblePage](AssemblePage.Mod) automates this&#xA;process.&#xA;&#xA;Example shell usage: ...</description>
            <pubDate>Mon, 19 Oct 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/19/Assemble-pages.md</guid>
        </item>
        <item>
            <title>Oberon to Markdown</title>
            <link>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.md</link>
            <description>Oberon to Markdown&#xA;==================&#xA;&#xA;This is the twelfth post in the [Mostly Oberon](https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;A nice feature of Oberon&#xA;------------------------&#xA;&#xA;Oberon source code has a very nice property in that anything&#xA;after the closing end statement is ignored by the compiler.&#xA;This makes it a nice place to write documentation, program&#xA;notes and other ideas.&#xA;&#xA;I&#39;ve gotten in the habit of writing up program docs and&#xA;notes there. When I prep to make a web document I used to&#xA;copy the source file, doing a cut and paste to re-order&#xA;the module code to the bottom of the document. I&#39;d follow&#xA;that with adding headers and code fences. Not hard but&#xA;tedious. Of course if I changed the source code I&#39;d also&#xA;have to do another cut and paste edit. This program,&#xA;`ObnToMd.Mod` automates that process. ...</description>
            <pubDate>Sat, 03 Oct 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.md</guid>
        </item>
    </channel>
</rss>