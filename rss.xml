<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>R. S. Doiel,</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s ramblings and wonderigsRobert&#39;s ramblings and wonderings</description>
        <copyright>copyright © 2016 - 2020 R. S. Doiel</copyright>
        <pubDate>Wed, 30 Sep 2020 00:00:00 UTC</pubDate>
        <lastBuildDate>Wed, 30 Sep 2020 00:00:00 UTC</lastBuildDate>
        <generator>mkrss v0.2.2</generator>
        <item>
            <title>Software Tools</title>
            <link>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.md</link>
            <description>&#xA;&#xA;# Software Tools, Chapter 1&#xA;&#xA;## Overview&#xA;&#xA;This post is the first in a series revisiting the&#xA;programs described in the 1981 book by Brian W. Kernighan and&#xA;P. J. Plauger&#39;s called [Software Tools in Pascal](https://archive.org/details/softwaretoolsinp00kern).&#xA;The book is available from the [Open Library](https://openlibrary.org/)&#xA;and physical copies are still (2020) commonly available from used book&#xA;sellers.  The book was an early text on creating portable command&#xA;line programs.&#xA;&#xA;In this series I present the K &amp; P (i.e. Software Tools in Pascal)&#xA;programs re-implemented in Oberon-7. I am testing my implementations&#xA;using Karl Landström&#39;s [OBNC](http://miasap.se/obnc/)&#xA;compiler and his implementation of the Oakwood Guide&#39;s modules&#xA;for portable Oberon programs. Karl also provides a few additional&#xA;modules for working in a POSIX environment (e.g. BSD, macOS, Linux,&#xA;Windows 10 with Linux subsystem). ...</description>
            <pubDate>Tue, 29 Sep 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/09/29/Software-Tools-1.md</guid>
        </item>
        <item>
            <title>Portable Oberon 7</title>
            <link>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-7.md</link>
            <description>&#xA;&#xA;# Portable Oberon 7&#xA;&#xA;## using OBNC modules&#xA;&#xA;This is the eleventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the&#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;## Working with standard input ...</description>
            <pubDate>Sat, 15 Aug 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/08/15/Portable-Oberon-7.md</guid>
        </item>
        <item>
            <title>Words Matter</title>
            <link>https://rsdoiel.github.io/blog/2020/07/08/words-matter.md</link>
            <description># Words Matter&#xA;&#xA;By R. S. Doiel, 2020-07-08&#xA;&#xA;UPDATE (2020-08-15, RSD): When I added a post today I was VERY pleased to &#xA;to see that GitHub now allows me to publish my blog via the &#34;main&#34; branch.&#xA;It&#39;s nice to see the change in the words we use.&#xA;&#xA;**Why does software development use the vocabulary of slavery and&#xA;Jim Crow to describe our creations?** What we call things matters.&#xA;This is especially true of the words we use day to day without thinking.&#xA;&#xA;```shell&#xA;    git pull origin master&#xA;``` ...</description>
            <pubDate>Wed, 08 Jul 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/08/words-matter.md</guid>
        </item>
        <item>
            <title>Procedures in records</title>
            <link>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.md</link>
            <description>&#xA;&#xA;# Procedures in records&#xA;&#xA;By R. S. Doiel, 2020-07-07&#xA;&#xA;This is the tenth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;In my last post I looked at how Oberon-7 supports the passing of procedures as parameters in a procedure. In this one I am looking at how we can&#xA;include procedures as a part of an Oberon RECORD. ...</description>
            <pubDate>Tue, 07 Jul 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/07/07/Procedures-in-records.md</guid>
        </item>
        <item>
            <title>Procedures as parameters</title>
            <link>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.md</link>
            <description>&#xA;&#xA;# Procedures as parameters&#xA;&#xA;By R. S. Doiel, 2020-06-20&#xA;&#xA;This is the ninth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series.&#xA;Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the &#xA;various rabbit holes I will inevitably fall into.&#xA;&#xA;Oberon-7 supports the passing of procedures as parameters in a procedure. &#xA;Let&#39;s create a module name [Noises.Mod](Noises.Mod) to explore this. ...</description>
            <pubDate>Sat, 20 Jun 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/06/20/Procedures-as-parameters.md</guid>
        </item>
        <item>
            <title>Dynamic types</title>
            <link>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.md</link>
            <description>&#xA;&#xA;# Dynamic types&#xA;&#xA;By R. S. Doiel, 2020-05-25&#xA;&#xA;This is the eighth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Dynamic Types in Oberon ...</description>
            <pubDate>Mon, 25 May 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/25/Dynamic-types.md</guid>
        </item>
        <item>
            <title>Oberon-7 and the file system</title>
            <link>https://rsdoiel.github.io/blog/2020/05/09/Oberon-7-and-the-filesystem.md</link>
            <description>&#xA;&#xA;# Oberon-7 and the file system&#xA;&#xA;By R. S. Doiel, 2020-05-09&#xA;&#xA;This is the seventh post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Working with files in Oberon-7 ...</description>
            <pubDate>Sat, 09 May 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/09/Oberon-7-and-the-filesystem.md</guid>
        </item>
        <item>
            <title>Compiling OBNC on macOS</title>
            <link>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.md</link>
            <description># Compiling OBNC on macOS&#xA;&#xA;By R. S. Doiel, 2020-05-06&#xA;&#xA;This is the sixth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;Compiling OBNC v0.16.1 on macOS (10.13.6) using MacPorts (2.6.2) &#xA;is straight forward if you have the required dependencies and &#xA;environment setup up. Below are my notes to get everything working.&#xA;&#xA;## Prerequisites ...</description>
            <pubDate>Wed, 06 May 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/06/Compiling-OBNC-on-macOS.md</guid>
        </item>
        <item>
            <title>Combining Oberon-7 and C with OBNC</title>
            <link>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.md</link>
            <description>&#xA;&#xA;# Combining Oberon-7 and C with OBNC&#xA;&#xA;By R. S. Doiel, 2020-05-01&#xA;&#xA;This is the fifth post in the [Mostly Oberon](../../04/11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;In my day job I write allot of code in Go and&#xA;orchestration code in Python.  It&#39;s nice having&#xA;the convenience of combining code written one&#xA;language with an another.  You can do the same&#xA;with [OBNC](https://miasap.se/obnc/).  The OBNC&#xA;compiler supports inclusion of C code in a&#xA;straight forward manner. In fact Karl&#39;s compiler&#xA;will generate the C file for you! ...</description>
            <pubDate>Fri, 01 May 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/05/01/Combining-Oberon-and-C.md</guid>
        </item>
        <item>
            <title>Oberon Loops and Conditions</title>
            <link>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.md</link>
            <description># Oberon Loops and Conditions&#xA;&#xA;By R. S. Doiel, 2020-04-19&#xA;&#xA;This is the four post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Data Flow&#xA;&#xA;Oberon is a small systems language and while it is minimalist.&#xA;It provides you with the necessary primitives to get things done.&#xA;I&#39;ve touched on code organization, basic types and basic type&#xA;extensions in the previous articles.  I have shown the basic&#xA;control statements but have not talked about them yet. ...</description>
            <pubDate>Sun, 19 Apr 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/19/Mostly-Oberon-Loops-and-Conditions.md</guid>
        </item>
        <item>
            <title>Oberon Basic Types</title>
            <link>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.md</link>
            <description># Oberon Basic Types&#xA;&#xA;By R. S. Doiel, 2020-04-18&#xA;&#xA;This is the third post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Simple Types&#xA;&#xA;Oberon is a small systems language. It provides a useful but &#xA;limited number of basic types[^basic-types]. These can be be&#xA;thought of as simple types mapping to specific memory locations&#xA;and more complex types composed of multiple memory locations. ...</description>
            <pubDate>Sat, 18 Apr 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/18/Mostly-Oberon-Basic-Types.md</guid>
        </item>
        <item>
            <title>Oberon Modules and Procedures</title>
            <link>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.md</link>
            <description>&#xA;&#xA;# Oberon Modules and Procedures&#xA;&#xA;By R. S. Doiel, 2020-04-12&#xA;&#xA;This is the second post in the [Mostly Oberon](../11/Mostly-Oberon.html) series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&#xA;&#xA;## Modules ...</description>
            <pubDate>Sun, 12 Apr 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/12/Mostly-Oberon-Modules.md</guid>
        </item>
        <item>
            <title>Mostly Oberon</title>
            <link>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.md</link>
            <description>&#xA;&#xA;# Mostly Oberon&#xA;&#xA;By R. S. Doiel, 2020-04-11&#xA;&#xA;**Mostly Oberon** is a series of blog posts documenting my exploration of the Oberon Language, Oberon System and the various rabbit wholes I inevitably fell into.&#xA;&#xA;## Overview ...</description>
            <pubDate>Sat, 11 Apr 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.md</guid>
        </item>
        <item>
            <title>FreeDOS 1.2 to Oberon System 3</title>
            <link>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.md</link>
            <description>&#xA;&#xA;# FreeDOS to Oberon System 3&#xA;&#xA;By R. S. Doiel, 2019-07-28&#xA;(updated: 2019-08-19)&#xA;&#xA;What follows are notes on getting a FreeDOS 1.2[^1] and &#xA;then Native Oberon[^2] running under VirtualBox 6.0. You might &#xA;wonder why these two are together. While it was&#xA;easy to run the Native Oberon installation process that process&#xA;assumes you have a properly partitioned hard disc and VirtualBox&#xA;seems to skip that process. I found taking advantage of FreeDOS&#xA;simplified things for me.&#xA;&#xA;My goal was running Oberon System 3, but setting up a Virtual Box&#xA;with FreeDOS 1.2 gave me a virtual machine that functions like a &#xA;1999 era PC. From there all the steps in the Oberon instructions&#xA;just worked. ...</description>
            <pubDate>Sun, 28 Jul 2019 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2019/07/28/freedos-to-oberon-system-3.md</guid>
        </item>
        <item>
            <title>Review: Software Tools in Pascal</title>
            <link>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.md</link>
            <description>&#xA;&#xA;# Review: Software Tools in Pascal&#xA;&#xA;By R. S. Doiel, 2018-07-22&#xA;(updated: 2018-07-22, 1:39 pm, PDT)&#xA;&#xA;This book is by Brian W. Kernighan and P. J. Plauger. It is an&#xA;example of the type of books I find I re-read and want in my&#xA;personal library. The book covers software construction through &#xA;a series of programs written in pascal. It is about how these &#xA;programs work, how to approach problems and write sound software.&#xA;I was surprised I did not know about this book when I was browsing &#xA;the [Open Library](https://openlibrary.org) this weekend.  While &#xA;Pascal was a popular in the 1980&#39;s it has faded for most people in the &#xA;early 21st century.  This review maybe a small bit of nostalgia. &#xA;On the other hand I suspect &#xA;[&#34;Software Tools in Pascal&#34;](https://openlibrary.org/books/OL4258115M/Software_tools_in_Pascal)&#xA;is one of the short list of computer books that will remain useful&#xA;over the long run.&#xA;&#xA;## What&#39;s covered ...</description>
            <pubDate>Sun, 22 Jul 2018 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/07/22/software-tools-in-pascal.md</guid>
        </item>
        <item>
            <title>Accessing Go from Julia</title>
            <link>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.md</link>
            <description>&#xA;&#xA;# Accessing Go from Julia&#xA;&#xA;By R. S. Doiel, 2018-03-11&#xA;&#xA;The problem: I&#39;ve started exploring Julia and I would like to leverage existing&#xA;code I&#39;ve written in Go. Essentially this is a revisit to the problem in my&#xA;last post [Go based Python Modules](https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.html) &#xA;but with the language pairing of Go and Julia.&#xA;&#xA;## Example 1, libtwice.go, libtwice.jl and libtwice_test.jl ...</description>
            <pubDate>Sun, 11 Mar 2018 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/03/11/accessing-go-from-julia.md</guid>
        </item>
        <item>
            <title>Go based Python modules</title>
            <link>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.md</link>
            <description>&#xA;&#xA;# Go based Python modules&#xA;&#xA;By R. S. Doiel, 2018-02-24&#xA;&#xA;The problem: I have written a number of Go packages at work.&#xA;My colleagues know Python and I&#39;d like them to be able to use the&#xA;packages without resorting to system calls from Python to the&#xA;command line implementations. The solution is create a C-Shared&#xA;library from my Go packages, using Go&#39;s _C_ package and combine it&#xA;with Python&#39;s _ctypes_ package.  What follows is a series of &#xA;simple recipes I used to understand the details of how that worked.&#xA;&#xA;## Example 1, libtwice.go and twice.py ...</description>
            <pubDate>Sat, 24 Feb 2018 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/24/go-based-python-modules.md</guid>
        </item>
        <item>
            <title>Go, Bleve and Library oriented software</title>
            <link>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.md</link>
            <description>&#xA;&#xA;# Go, Bleve and Library oriented software&#xA;&#xA;By R. S. Doiel, 2018-02-19&#xA;(updated: 2018-02-22)&#xA;&#xA;In 2016, Stephen Davison, asked me, &#34;Why use Go and Blevesearch for&#xA;our library projects?&#34; After our conversation I wrote up some notes so&#xA;I would remember. It is now 2018 and I am revising these notes. I&#xA;think our choice paid off.  What follows is the current state of my&#xA;reflection on the background, rational, concerns, and risk mitigation&#xA;strategies so far for using [Go](https://golang.org) and&#xA;[Blevesearch](https://blevesearch.com) for Caltech Library projects.&#xA;&#xA;## Background ...</description>
            <pubDate>Mon, 19 Feb 2018 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2018/02/19/go-bleve-and-libraries.md</guid>
        </item>
        <item>
            <title>Raspbian Stretch on DELL E4310 Laptop</title>
            <link>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.md</link>
            <description>&#xA;&#xA;# Raspbian Stretch on DELL E4310 Laptop&#xA;&#xA;by R. S. Doiel 2017-12-18&#xA;&#xA;Today I bought a used Dell E4310 laptop. The E4310 is an &#34;old model&#34; now&#xA;but certainly not vintage yet.  It has a nice keyboard and reasonable &#xA;screen size and resolution. I bought it as a writing machine. I mostly&#xA;write in Markdown or Fountain depending on what I am writing these days.&#xA;&#xA;## Getting the laptop setup ...</description>
            <pubDate>Mon, 18 Dec 2017 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/18/raspbian-stretch-on-amd64.md</guid>
        </item>
        <item>
            <title>Harvesting my Gists from GitHub</title>
            <link>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.md</link>
            <description>&#xA;&#xA;# Harvesting my Gists from GitHub&#xA;&#xA;By R. S. Doiel 2017-12-10&#xA;&#xA;This is a just quick set of notes on harvesting my Gists on Github so I&#xA;have an independent copy for my own website.&#xA;&#xA;## Assumptions ...</description>
            <pubDate>Sun, 10 Dec 2017 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/12/10/harvesting-my-gists-from-github.md</guid>
        </item>
        <item>
            <title>NodeJS, NPM, Electron</title>
            <link>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.md</link>
            <description>&#xA;&#xA;# NodeJS, NPM, Electron&#xA;&#xA;By R. S. Doiel 2017-10-20&#xA;&#xA;Electron is an app platform leveraging web technoligies. Conceptually it is a&#xA;mashup of NodeJS and Chrome browser. [Electron](https://electron.atom.io/) site&#xA;has a nice starter app. It displays a window with Electron version info and&#xA;&#39;hello world&#39;.&#xA;&#xA;Before you can get going with _Electron_ you need to have a&#xA;working _NodeJS_ and _NPM_. I usually compile from source and this&#xA;was my old recipe (adjusted for v8.7.0). ...</description>
            <pubDate>Fri, 20 Oct 2017 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.md</guid>
        </item>
        <item>
            <title>NodeJS, NPM, Electron</title>
            <link>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.md</link>
            <description>&#xA;&#xA;# NodeJS, NPM, Electron&#xA;&#xA;By R. S. Doiel 2017-10-20&#xA;&#xA;Electron is an app platform leveraging web technoligies. Conceptually it is a&#xA;mashup of NodeJS and Chrome browser. [Electron](https://electron.atom.io/) site&#xA;has a nice starter app. It displays a window with Electron version info and&#xA;&#39;hello world&#39;.&#xA;&#xA;Before you can get going with _Electron_ you need to have a&#xA;working _NodeJS_ and _NPM_. I usually compile from source and this&#xA;was my old recipe (adjusted for v8.7.0). ...</description>
            <pubDate>Tue, 20 Jun 2017 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/10/20/node-npm-electron.md</guid>
        </item>
        <item>
            <title>Cross compiling Go 1.8.3 for Pine64 Pinebook</title>
            <link>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.md</link>
            <description>&#xA;&#xA;# Cross compiling Go 1.8.3 for Pine64 Pinebook&#xA;&#xA;By R. S. Doiel 2017-06-16&#xA;&#xA;Pine64&#39;s Pinebook has a 64-bit Quad-Core ARM Cortex A53 which is &#xA;not the same ARM processor found on a Raspberry Pi 3. As a &#xA;result it needs its own compiled version of Go. Fortunately cross &#xA;compiling Go is very straight forward. I found two helpful Gists&#xA;on Github discussing compiling Go for a 64-Bit ARM processor.&#xA;&#xA;+ [conoro&#39;s gist](https://gist.github.com/conoro/4fca191fad018b6e47922a21fab499ca)&#xA;+ [truedat101&#39;s gist](https://gist.github.com/truedat101/5898604b1f7a1ec42d65a75fa6a0b802) ...</description>
            <pubDate>Fri, 16 Jun 2017 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2017/06/16/cross-compiling-go.md</guid>
        </item>
        <item>
            <title>Android, Termux and Dev Environment</title>
            <link>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.md</link>
            <description>&#xA;&#xA;# Android, Termux and Dev Environment&#xA;&#xA;By R. S. Doiel 2016-09-20&#xA;&#xA;Recently I got a new Android 6 tablet. I got a case with a tiny Bluetooth keyboard. I started wondering if I could use it as a developmment device when on the road. So this is my diary of that test.&#xA;&#xA;## Challenges ...</description>
            <pubDate>Tue, 20 Sep 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/09/20/Android-Termux-Dev-environment.md</guid>
        </item>
        <item>
            <title>From Markdown and Bash to mkpage</title>
            <link>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.md</link>
            <description>&#xA;&#xA;# From Markdown and Bash to mkpage&#xA;&#xA;By R. S. Doiel 2016-08-16&#xA;&#xA;When I started maintaining a website on Github a few years ago my needs&#xA;were so simple I hand coded the HTML.  Eventually I adopted &#xA;a markdown processor for maintaining the prose. My &#34;theme&#34; was a&#xA;CSS file and some HTML fragments to wrap the markdown output. If I needed &#xA;interactivity I used JavaScript to access content via a web API. &#xA;Life was simple, all I had to learn to get started was Git and how to&#xA;populate a branch called &#34;gh-pages&#34;.&#xA;&#xA;## Deconstructing Content Management Systems ...</description>
            <pubDate>Tue, 16 Aug 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/16/From-Markdown-and-Bash-to-mkpage.md</guid>
        </item>
        <item>
            <title>Exploring Bash for Windows 10 Pro</title>
            <link>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.md</link>
            <description>&#xA;&#xA;# Exploring Bash for Windows 10 Pro&#xA;&#xA;By R. S. Doiel 2016-08-15&#xA;&#xA;UPDATE (2016-10-27, RSD): Today trying to compile Go 1.7.3 under &#xA;    Windows 10 Pro I&#39;ve am getting compile errors when the &#xA;    assembler is being built.  I can compile go1.4.3 but see errors &#xA;    in some of the tests results.&#xA;&#xA;## Initital Setup and configuration ...</description>
            <pubDate>Mon, 15 Aug 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/08/15/Setting-up-Go-under-Bash-for-Windows-10.md</guid>
        </item>
        <item>
            <title>How to make a Pi-Top more Raspbian</title>
            <link>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.md</link>
            <description>&#xA;&#xA;# How to make a Pi-Top more Raspbian&#xA;&#xA;By R. S. Doiel 2016-07-04&#xA;&#xA;I have a first generation Pi-Top.  I like the idea but found I didn&#39;t use it much due to a preferrence for&#xA;basic Raspbian. With the recent Pi-TopOS upgrades I realized getting back to basic Raspbian was relatively&#xA;straight forward.&#xA;&#xA;## The recipe ...</description>
            <pubDate>Mon, 04 Jul 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/07/04/How-To-Make-A-PiTop-More-Raspbian.md</guid>
        </item>
        <item>
            <title>Instant Articles, Accelerated Mobile Pages, Twitter Cards and Open Graph</title>
            <link>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.md</link>
            <description>&#xA;&#xA;# Instant Articles, Accelerated Mobile Pages, Twitter Cards and Open Graph&#xA;&#xA;By R. S. Doiel 2016-05-30&#xA;&#xA;## The problem&#xA;&#xA;The web has gotten slow. In [2016](http://httparchive.org/trends.php) the &#xA;average page weight is in multi-megabytes and the average number of network &#xA;requests needed to deliver the content is counted in &#xA;the hundreds. In the mix are saturated networks and a continued public &#xA;expectation of responsiveness (web wisdom suggests you have about 3 seconds &#xA;before people give up).  The odd thing is we&#39;ve known how to build fast &#xA;websites for a [decade](https://www.stevesouders.com/) or so.  &#xA;Collectively we don&#39;t build them [fast](https://www.sitepoint.com/average-page-weight-increased-another-16-2015/). ...</description>
            <pubDate>Mon, 30 May 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/30/amp-cards-and-open-graph.md</guid>
        </item>
        <item>
            <title>OPML to Markdown and back</title>
            <link>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.md</link>
            <description># OPML to Markdown and back&#xA;&#xA;By R. S. Doiel 2016-05-28&#xA;&#xA;## Overview&#xA;&#xA;I wrote a Go language package to sort [OPML](http://dev.opml.org/spec2.html) outlines. &#xA;I wrote this because my preferred [feed reader ](http://goread.io) supports manual &#xA;sorting but not automatic alpha sorting by the _outline_ element&#39;s _text_ attribute.&#xA;&#xA;## Observations ...</description>
            <pubDate>Sat, 28 May 2016 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2016/05/28/OPML-to-Markdown-and-back.md</guid>
        </item>
    </channel>
</rss>