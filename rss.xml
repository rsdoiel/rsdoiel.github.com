<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>R. S. Doiel,</title>
        <link>https://rsdoiel.github.io</link>
        <description>Robert&#39;s ramblings and wonderigsRobert&#39;s ramblings and wonderings</description>
        <copyright>copyright © 2016 - 2020 R. S. Doiel</copyright>
        <pubDate>Sat, 03 Oct 2020 00:00:00 UTC</pubDate>
        <lastBuildDate>Sat, 03 Oct 2020 00:00:00 UTC</lastBuildDate>
        <generator>mkrss v0.1.1</generator>
        <item>
            <title></title>
            <link>https://rsdoiel.github.io/blog/2020/10/03/ObnToMd.Mod</link>
            <description>&lt;p&gt;(* ObnToMd.Mod - an simple filter process for reading an Oberon-7 module source file and rendering a markdown friendly output suitable for piping into Pandoc. The filter reads from standard input and writes to standard output and makes use of a temp file name o2m.tmp which it removes after successful rendering.&lt;/p&gt;&#xA;&lt;p&gt;&lt;span class=&#34;citation&#34; data-cites=&#34;Author&#34;&gt;@Author&lt;/span&gt; R. S. Doiel, &lt;a href=&#34;mailto:rsdoiel@gmail.com&#34; class=&#34;email&#34;&gt;rsdoiel@gmail.com&lt;/a&gt; copyright (c) 2020, all rights reserved. Released under the BSD 2-clause license See: https://opensource.org/licenses/BSD-2-Clause *) MODULE ObnToMd; IMPORT In, Out, Files, Strings;&lt;/p&gt;&#xA;&lt;p&gt;CONST MAXLENGTH = 1024; LF = CHR(10);&lt;/p&gt;&#xA;&lt;p&gt;VAR endOfLine : ARRAY 2 OF CHAR;&lt;/p&gt;&#xA;&lt;p&gt;(&lt;em&gt; &lt;/em&gt; Helper methods *) PROCEDURE GenTempName(prefix, suffix : ARRAY OF CHAR; VAR name : ARRAY OF CHAR); BEGIN name := &#34;“; Strings.Append(prefix, name); Strings.Append(”.&#34;, name); Strings.Append(suffix, name); END GenTempName;&lt;/p&gt;&#xA;&lt;p&gt;PROCEDURE GenTempFile(name : ARRAY OF CHAR; VAR r : Files.Rider; VAR f : Files.File); BEGIN f := Files.New(name); IF f = NIL THEN Out.String(“ERROR: can’t create”);Out.String(name);Out.Ln(); ASSERT(FALSE); END; Files.Register(f); Files.Set(r, f, 0); END GenTempFile; …&lt;/p&gt;&#xA;</description>
            <pubDate>Sat, 03 Oct 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/03/ObnToMd.Mod</guid>
        </item>
        <item>
            <title>Oberon to markdown</title>
            <link>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.md</link>
            <description>&lt;h1 id=&#34;oberon-to-markdown&#34;&gt;Oberon to Markdown&lt;/h1&gt;&#xA;&lt;p&gt;This is the twelth post in the &lt;a href=&#34;https://rsdoiel.github.io/blog/2020/04/11/Mostly-Oberon.html&#34;&gt;Mostly Oberon&lt;/a&gt; series. Mostly Oberon documents my exploration of the Oberon Language, Oberon System and the various rabbit holes I will inevitably fall into.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-nice-feature-of-oberon&#34;&gt;A nice feature of Oberon&lt;/h2&gt;&#xA;&lt;p&gt;Oberon source code has a very nice property in that anything after the closing end statement is ignored by the compiler. This makes it a nice place to write documentation, program notes and other ideas.&lt;/p&gt;&#xA;&lt;p&gt;I’ve gotten in the habit of writing up program docs and notes there. When I prep to make a web document I used to copy the source file, doing a cut and paste to re-order the module code to the bottom of the document. I’d follow that with adding headers and code fences. Not hard but tedious. Of course if I changed the source code I’d also have to do another cut and paste edit. This program, &lt;code&gt;ObnToMd.Mod&lt;/code&gt; automates that process. …&lt;/p&gt;&#xA;</description>
            <pubDate>Sat, 03 Oct 2020 00:00:00 UTC</pubDate>
            <guid>https://rsdoiel.github.io/blog/2020/10/03/Oberon-to-markdown.md</guid>
        </item>
    </channel>
</rss>